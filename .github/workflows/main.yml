name: Task

on:
  workflow_dispatch:
  repository_dispatch:
    types: [start]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 150

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          # Нужен PAT вместо GITHUB_TOKEN, чтобы workflow мог запускать другой workflow
          # и чтобы иметь возможность делать коммиты (для сохранения бэкапа)
          token: ${{ secrets.PAT_TOKEN }} 

      # Шаг 1: Восстанавливаем данные из бэкапа
      - name: Restore backup
        run: |
          if [ -f "test.zip" ]; then
            echo "Backup file found. Restoring..."
            unzip -o test.zip -d ./
          else
            echo "No backup found. Starting fresh."
          fi

      # Шаг 2: Случайный перезапуск (если требуется)
      - name: Check for random restart
        id: check_restart
        run: |
          sleep $((50 + RANDOM % 120))
          if (( RANDOM % 2 == 0 )); then
            echo "Decision: RESTART. Triggering a new workflow run and stopping this one."
            echo "restart=true" >> $GITHUB_OUTPUT
            
            curl -L \
              -X POST \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/dispatches" \
              -d '{"event_type": "start"}'
            
            exit 1 # Завершаем текущий воркфлоу
          else
            echo "Decision: CONTINUE. Proceeding with the current workflow."
            echo "restart=false" >> $GITHUB_OUTPUT
          fi

      # Шаг 3: Запускаем tmate в фоновом режиме (если не было перезапуска)
      - name: Setup and Run tmate in background
        if: steps.check_restart.outputs.restart == 'false'
        id: tmate
        run: |
          sudo apt-get update && sudo apt-get install -y tmate
          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready
          
          TMATE_SSH=$(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')
          TMATE_WEB=$(tmate -S /tmp/tmate.sock display -p '#{tmate_web}')
          
          echo "TMATE_SSH_URL=${TMATE_SSH}" >> $GITHUB_OUTPUT
          echo "TMATE_WEB_URL=${TMATE_WEB}" >> $GITHUB_OUTPUT


      # Шаг 5: Запускаем основной скрипт (если не было перезапуска)
      - name: Run main script test.sh
        timeout-minutes: 25 # Даем больше времени основному скрипту
        continue-on-error: true
        run: |
          set -euo pipefail
          sudo sh test.sh
          


      # Шаг 8: Завершаем сессию tmate и запускаем следующий воркфлоу
      - name: Cleanup and Trigger Next Run
        if: always() # Выполняем всегда, чтобы убить tmate и перезапуститься
        run: |
          echo "Killing tmate server..."
          tmate -S /tmp/tmate.sock kill-server || true
          
          echo "Triggering next workflow run..."
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/dispatches" \
            -d '{"event_type": "start"}'
